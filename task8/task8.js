

// Умови задачі по шагам:

// Для вирішення задачі надано три функції: stepOne, stepTwo та stepThree.
// Кожна функція повертає проміс зі змінною затримкою для імітації асинхронних операцій:
// stepOne повертає проміс, який резолвиться зі значенням 10 після 1 секунди.
// stepTwo отримує значення і повертає проміс, який резолвиться з результатом множення отриманого значення на 2 після 2 секунд.
// stepThree отримує значення і повертає проміс, який резолвиться з результатом додавання отриманого значення 5 після 1.5 секунди.
// Послідовно використовуючи методи then, результати кожної функції обробляються одна за одною:
// Результат функції stepOne передається в якості аргументу функції stepTwo.
// Результат функції stepTwo передається в якості аргументу функції stepThree.
// Результат функції stepThree виводиться в консоль разом із текстовим повідомленням "Результат останньої функції:".
// Якщо сталася помилка в будь-якій із функцій (режект проміса), вона буде виведена в консоль разом із текстовим повідомленням "Сталась помилка:".


// Завдання: Обробка послідовності промісів

// Створіть послідовність з трьох функцій, які повертають проміси і обробляють їх результати один за одним. Кожна функція повинна виконуватись з деякою затримкою для імітації асинхронності. Потім виведіть результат останньої функції у консоль.



function stepOne() {
    return new Promise((resolve) => {
        setTimeout(() => {
            resolve(10)
        }, 1000)
    })
}

function stepTwo(amount) {
    return new Promise((resolve) => {
        setTimeout(() => {
            resolve(amount * 2)
        }, 2000)
    })
}

function stepThree(amount) {
    return new Promise((resolve) => {
        setTimeout(() => {
            resolve(amount + 5)
        }, 1500)
    })
}

stepOne().then((result) => stepTwo(result)).then((result) => stepThree(result)).then((result) => console.log(result)).catch((error) => console.log(error))
stepOne().then(stepTwo).then(stepThree).then(console.log).catch(console.log)